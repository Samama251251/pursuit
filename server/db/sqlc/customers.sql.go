// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: customers.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createCustomer = `-- name: CreateCustomer :one
INSERT INTO customers (restaurant_id, name, email, phone)
VALUES ($1, $2, $3, $4)
RETURNING customer_id, restaurant_id, name, email, phone, created_at
`

type CreateCustomerParams struct {
	RestaurantID int32
	Name         string
	Email        pgtype.Text
	Phone        pgtype.Text
}

type CreateCustomerRow struct {
	CustomerID   int32
	RestaurantID int32
	Name         string
	Email        pgtype.Text
	Phone        pgtype.Text
	CreatedAt    pgtype.Timestamp
}

func (q *Queries) CreateCustomer(ctx context.Context, arg CreateCustomerParams) (CreateCustomerRow, error) {
	row := q.db.QueryRow(ctx, createCustomer,
		arg.RestaurantID,
		arg.Name,
		arg.Email,
		arg.Phone,
	)
	var i CreateCustomerRow
	err := row.Scan(
		&i.CustomerID,
		&i.RestaurantID,
		&i.Name,
		&i.Email,
		&i.Phone,
		&i.CreatedAt,
	)
	return i, err
}

const deleteCustomer = `-- name: DeleteCustomer :exec
DELETE FROM customers
WHERE customer_id = $1
`

func (q *Queries) DeleteCustomer(ctx context.Context, customerID int32) error {
	_, err := q.db.Exec(ctx, deleteCustomer, customerID)
	return err
}

const getCustomerByID = `-- name: GetCustomerByID :one
SELECT customer_id, restaurant_id, name, email, phone, created_at
FROM customers
WHERE customer_id = $1
`

type GetCustomerByIDRow struct {
	CustomerID   int32
	RestaurantID int32
	Name         string
	Email        pgtype.Text
	Phone        pgtype.Text
	CreatedAt    pgtype.Timestamp
}

func (q *Queries) GetCustomerByID(ctx context.Context, customerID int32) (GetCustomerByIDRow, error) {
	row := q.db.QueryRow(ctx, getCustomerByID, customerID)
	var i GetCustomerByIDRow
	err := row.Scan(
		&i.CustomerID,
		&i.RestaurantID,
		&i.Name,
		&i.Email,
		&i.Phone,
		&i.CreatedAt,
	)
	return i, err
}

const listCustomersByRestaurant = `-- name: ListCustomersByRestaurant :many
SELECT customer_id, restaurant_id, name, email, phone, created_at
FROM customers
WHERE restaurant_id = $1
ORDER BY created_at DESC
`

type ListCustomersByRestaurantRow struct {
	CustomerID   int32
	RestaurantID int32
	Name         string
	Email        pgtype.Text
	Phone        pgtype.Text
	CreatedAt    pgtype.Timestamp
}

func (q *Queries) ListCustomersByRestaurant(ctx context.Context, restaurantID int32) ([]ListCustomersByRestaurantRow, error) {
	rows, err := q.db.Query(ctx, listCustomersByRestaurant, restaurantID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListCustomersByRestaurantRow
	for rows.Next() {
		var i ListCustomersByRestaurantRow
		if err := rows.Scan(
			&i.CustomerID,
			&i.RestaurantID,
			&i.Name,
			&i.Email,
			&i.Phone,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCustomer = `-- name: UpdateCustomer :exec
UPDATE customers
SET name = $1,
    email = $2,
    phone = $3
WHERE customer_id = $4
`

type UpdateCustomerParams struct {
	Name       string
	Email      pgtype.Text
	Phone      pgtype.Text
	CustomerID int32
}

func (q *Queries) UpdateCustomer(ctx context.Context, arg UpdateCustomerParams) error {
	_, err := q.db.Exec(ctx, updateCustomer,
		arg.Name,
		arg.Email,
		arg.Phone,
		arg.CustomerID,
	)
	return err
}
