// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: invite_user.sql

package db

import (
	"context"
)

const checkInvite = `-- name: CheckInvite :one
SELECT email, role_id, restaurant_id FROM invite 
WHERE email = $1
`

type CheckInviteRow struct {
	Email        string
	RoleID       int32
	RestaurantID int32
}

func (q *Queries) CheckInvite(ctx context.Context, email string) (CheckInviteRow, error) {
	row := q.db.QueryRow(ctx, checkInvite, email)
	var i CheckInviteRow
	err := row.Scan(&i.Email, &i.RoleID, &i.RestaurantID)
	return i, err
}

const deleteInvite = `-- name: DeleteInvite :exec
DELETE FROM invite WHERE email = $1
`

func (q *Queries) DeleteInvite(ctx context.Context, email string) error {
	_, err := q.db.Exec(ctx, deleteInvite, email)
	return err
}

const inviteUser = `-- name: InviteUser :exec
INSERT INTO invite (email, role_id, restaurant_id) 
VALUES ($1, $2, $3)
`

type InviteUserParams struct {
	Email        string
	RoleID       int32
	RestaurantID int32
}

func (q *Queries) InviteUser(ctx context.Context, arg InviteUserParams) error {
	_, err := q.db.Exec(ctx, inviteUser, arg.Email, arg.RoleID, arg.RestaurantID)
	return err
}
