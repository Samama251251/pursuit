// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: items.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createItem = `-- name: CreateItem :one
INSERT INTO items (restaurant_id, name, description, price, is_available)
VALUES ($1, $2, $3, $4, $5)
RETURNING item_id, restaurant_id, name, description, price, is_available, created_at
`

type CreateItemParams struct {
	RestaurantID int32
	Name         string
	Description  pgtype.Text
	Price        pgtype.Numeric
	IsAvailable  pgtype.Bool
}

func (q *Queries) CreateItem(ctx context.Context, arg CreateItemParams) (Item, error) {
	row := q.db.QueryRow(ctx, createItem,
		arg.RestaurantID,
		arg.Name,
		arg.Description,
		arg.Price,
		arg.IsAvailable,
	)
	var i Item
	err := row.Scan(
		&i.ItemID,
		&i.RestaurantID,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.IsAvailable,
		&i.CreatedAt,
	)
	return i, err
}

const deleteItem = `-- name: DeleteItem :exec
DELETE FROM items
WHERE item_id = $1
`

func (q *Queries) DeleteItem(ctx context.Context, itemID int32) error {
	_, err := q.db.Exec(ctx, deleteItem, itemID)
	return err
}

const getItemByID = `-- name: GetItemByID :one
SELECT item_id, restaurant_id, name, description, price, is_available, created_at FROM items
WHERE item_id = $1
`

func (q *Queries) GetItemByID(ctx context.Context, itemID int32) (Item, error) {
	row := q.db.QueryRow(ctx, getItemByID, itemID)
	var i Item
	err := row.Scan(
		&i.ItemID,
		&i.RestaurantID,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.IsAvailable,
		&i.CreatedAt,
	)
	return i, err
}

const listItemsByRestaurant = `-- name: ListItemsByRestaurant :many
SELECT item_id, restaurant_id, name, description, price, is_available, created_at FROM items
WHERE restaurant_id = $1
ORDER BY created_at DESC
`

func (q *Queries) ListItemsByRestaurant(ctx context.Context, restaurantID int32) ([]Item, error) {
	rows, err := q.db.Query(ctx, listItemsByRestaurant, restaurantID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Item
	for rows.Next() {
		var i Item
		if err := rows.Scan(
			&i.ItemID,
			&i.RestaurantID,
			&i.Name,
			&i.Description,
			&i.Price,
			&i.IsAvailable,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateItem = `-- name: UpdateItem :one
UPDATE items
SET name = $2,
    description = $3,
    price = $4,
    is_available = $5
WHERE item_id = $1
RETURNING item_id, restaurant_id, name, description, price, is_available, created_at
`

type UpdateItemParams struct {
	ItemID      int32
	Name        string
	Description pgtype.Text
	Price       pgtype.Numeric
	IsAvailable pgtype.Bool
}

func (q *Queries) UpdateItem(ctx context.Context, arg UpdateItemParams) (Item, error) {
	row := q.db.QueryRow(ctx, updateItem,
		arg.ItemID,
		arg.Name,
		arg.Description,
		arg.Price,
		arg.IsAvailable,
	)
	var i Item
	err := row.Scan(
		&i.ItemID,
		&i.RestaurantID,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.IsAvailable,
		&i.CreatedAt,
	)
	return i, err
}
